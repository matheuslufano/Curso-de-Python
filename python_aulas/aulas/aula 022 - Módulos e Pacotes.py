"""
    Curso Python #22 - M√≥dulos e Pacotes
---------------------------------------------
--> Modulariza√ß√£o: Ato de construir modulos.
Esse conceito surgiu na d√©cada de 60, com os
sistemas ficando cada vez maiores.
* Foco da modulariza√ß√£o:
    - Dividir um programa grande
    - Aumentar a legibilidade
    - Facilitar a manuten√ß√£o

A modulariza√ß√£o vai funcionar da seguinte maneira,
em um projeto voc√™ pode criar um arquivo separado
com varis fun√ß√µes especificas e dai importar o arquivo
inteiro como se fosse uma biblioteca, ou fun√ß√µes especificas
dentro de arquivo.

No exemplo a seguir temos v√°rios 'def', isso pode atrapalhar
a visualiza√ß√£o do c√≥digo por inteiro, por tanto se criou um
arquivo chamado 'uteis.py' e dentro do arquivo atual podemos
importar fun√ß√µes de 'uteis.py'.

---------------------------------------------------------------------------------------------
def fatorial(n):   # fun√ß√£o de fatorar
    f = 1
    for c in range(1, n+1):
        print(f'{f} x {c} = {f*c}')
        f *= c
    return f

def dobro(n):
    return n * 2

def triplo(n):
    return n * 3

# Programa principal
num = int(input('Digite m valor: '))
fat = fatorial(num) # Caso uma fun√ß√£o n√£o exista, o pychame possui uma fun√ß√£o de p/ automaticamente.
print(f'O fatorial de {num} √© {fat}.\n'
      f'O dobro de {num} √© {dobro(num)}\n'
      f'O triplo {num} √© {dobro(num)}')
-------------------------------------------------------------------------------------------------------------
"""

# Com as fun√ß√µes criadas no arquivo uteis, j√° podemos importar un√ß√µes.
# 1.¬∫ caso, importando toda a fun√ß√£o, o que pode consumir muita mem√≥ria!
import uteis

num = int(input('Digite um valor: '))
fat = uteis.fatorial(num)
print(f'O fatorial de {num} √© {fat}.')
print(f'O dobro de {num} √© {uteis.dobro(num)}')

# 2.¬∫ caso, importando partes de uma fun√ß√£o, √© mais indicado e economiza memoria.
from uteis import fatorial, dobro

num = int(input('Digite um valor: '))
fat = fatorial(num)
print(f'O fatorial de {num} √© {fat}.')
print(f'O dobro de {num} √© {dobro(num)}')

"""
VANTAGENS DAS MODULARIZA√á√ïES

- Organiza√ß√£o do c√≥digo: Ao modularizar estamos dividindo problemas
maiores em problemas menores.

- Facilidade na manuten√ß√£o: Caso dei um problema basta ir at√© a fun√ß√£o 
e arruma, sem ter que mexer em varias outras parte do c√≥digo.

- Oculta√ß√£o do c√≥digo detalhando: A maioria das fun√ß√µes no c√≥digo n√£o
precisamos saber exatamente como √© feita tofo o se processo, por isso 
podemos ocultar boa parte.

- Reutiliza√ß√£o em outros projetos: üòç isso √© maravilhoso, √© poss√≠vel reciclar as fun√ß√£o
em outros projetos.
-----------------------------------------------------------------------------------------
--> PACOTES:
Pacotes no python √© o ator de armazenar varias fun√ß√µes separadas por pastas
e utilidade em uma s√≥ pasta pasta.
que ser√° chamado de pacotes:
  - Pacotes uteis/
        Dentro dele haver√° varias un√ß√µes que pode ser 
        separadas por categorias como em uma biblioteca
        como:
        - n√∫meros
            def...()
            def...()
        - strings
            def...()
            def...()
            ...
        - datas
            def...()
            def...()
            ...
        - cores
            def...()
            def...()
Para se utilizar uma das fun√ß√µes, basta importar todas fun√ß√µes ou parte das un√ß√µes        
ex.:
    import uteis
    #importe uteis
            ou
    from uteis import datas
    #dentro de uteis import datas

Em cada arquivo no pacote dever√° conter um arquivo:
 #que conter√° um arquivo chamado (__init__.py)
    python package:
        "__init__.py"
           
"""
from uteis import n√∫meros

num = int(input('Digite um valor: '))
fat = n√∫meros.fatorial(num)
print(f'O fatorial de {num} √© {fat}.')
print(f'O dobro de {num} √© {dobro(num)}')